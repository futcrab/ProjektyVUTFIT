/**
 * @file    tree_mesh_builder.cpp
 *
 * @author  Peter Durica <xduric05@stud.fit.vutbr.cz>
 *
 * @brief   Parallel Marching Cubes implementation using OpenMP tasks + octree early elimination
 *
 * @date    09 December 2023, 17:35
 **/

#include <iostream>
#include <math.h>
#include <limits>

#include "tree_mesh_builder.h"

TreeMeshBuilder::TreeMeshBuilder(unsigned gridEdgeSize)
    : BaseMeshBuilder(gridEdgeSize, "Octree")
{

}

unsigned TreeMeshBuilder::marchCubes(const ParametricScalarField &field)
{
    // Suggested approach to tackle this problem is to add new method to
    // this class. This method will call itself to process the children.
    // It is also strongly suggested to first implement Octree as sequential
    // code and only when that works add OpenMP tasks to achieve parallelism.
    unsigned totalTriangles = 0;
    
    #pragma omp parallel default(none) shared(field, totalTriangles)
    {
        #pragma omp master
        totalTriangles = processChildren(field, Vec3_t<float>(0, 0, 0), mGridSize);
    }
    
    
    return totalTriangles;
}

unsigned TreeMeshBuilder::processChildren(const ParametricScalarField &field, const Vec3_t<float> &cubeOffset, unsigned cubeSize)
{
    //Calculate the HalfLine
    float HalfLine = cubeSize * mGridResolution / 2.f;

    //Calculate the middle of cube
    Vec3_t<float> middle(
        cubeOffset.x * mGridResolution + HalfLine,
        cubeOffset.y * mGridResolution + HalfLine,
        cubeOffset.z * mGridResolution + HalfLine
    );

    //Calculate constant with sqrt(3) for octree
    float constant = sqrt(3.f)/2.f;

    //Check if the cube is empty
    if(evaluateFieldAt(middle, field) > mIsoLevel + (HalfLine * 2.f) * constant)
    {
        return 0;
    }

    //If the cube is small enough, generate triangles
    if(cubeSize == 1)
    {
        return buildCube(cubeOffset, field);
    }


    //If not at the end of recursion, calculate for 8 children
    unsigned childrenCubeSize = cubeSize / 2;
    unsigned childrenTotalTriangles = 0;

    //Create 8 children using 3 for loops
    for (int x = 0; x < 2; x++){
        for (int y = 0; y < 2; y++){
            for (int z = 0; z < 2; z++){
                #pragma omp task default(none) shared(field, cubeOffset, childrenCubeSize, childrenTotalTriangles) firstprivate(x, y, z)
                {
                    //Calculate offset for each child using normal directions generated by for loops
                    Vec3_t<float> childOffset(
                        cubeOffset.x + x * childrenCubeSize,
                        cubeOffset.y + y * childrenCubeSize,
                        cubeOffset.z + z * childrenCubeSize
                    );
                    //Recursively call processChildren for each child
                    unsigned childrenTriangles = processChildren(field, childOffset, childrenCubeSize);

                    //Add the number of triangles from children to the total number of triangles
                    #pragma omp atomic update
                    childrenTotalTriangles += childrenTriangles;
                }
            }
        }
    }
    //Return the number of triangles
    #pragma omp taskwait
    return childrenTotalTriangles;
}

float TreeMeshBuilder::evaluateFieldAt(const Vec3_t<float> &pos, const ParametricScalarField &field)
{
    // NOTE: This method is called from "buildCube(...)"!

    // 1. Store pointer to and number of 3D points in the field
    //    (to avoid "data()" and "size()" call in the loop).
    const Vec3_t<float> *pPoints = field.getPoints().data();
    const unsigned count = unsigned(field.getPoints().size());

    float value = std::numeric_limits<float>::max();

    // 2. Find minimum square distance from points "pos" to any point in the
    //    field.
    //#pragma omp parallel for reduction(min:value) shared(pPoints, count, pos) schedule(static)
    for(unsigned i = 0; i < count; ++i)
    {
        float distanceSquared  = (pos.x - pPoints[i].x) * (pos.x - pPoints[i].x);
        distanceSquared       += (pos.y - pPoints[i].y) * (pos.y - pPoints[i].y);
        distanceSquared       += (pos.z - pPoints[i].z) * (pos.z - pPoints[i].z);

        // Comparing squares instead of real distance to avoid unnecessary
        // "sqrt"s in the loop.
        value = std::min(value, distanceSquared);
    }

    // 3. Finally take square root of the minimal square distance to get the real distance
    return sqrt(value);
}

void TreeMeshBuilder::emitTriangle(const BaseMeshBuilder::Triangle_t &triangle)
{
        // NOTE: This method is called from "buildCube(...)"!

    // Store generated triangle into vector (array) of generated triangles.
    // The pointer to data in this array is return by "getTrianglesArray(...)" call
    // after "marchCubes(...)" call ends.
    #pragma omp critical(push_triangle)
    mTriangles.push_back(triangle);
}
